
let length = __ipl_list_length
let nth = __ipl_list_nth
let head = __ipl_list_head
let tail = __ipl_list_tail
let take = \x \y (head y x)
let put = __ipl_list_put
let rev = __ipl_list_rev
let append = __ipl_list_append
let rev-append = __ipl_list_rev_append
let map = __ipl_list_map
let rev-map = __ipl_list_rev_map
let filter = __ipl_list_filter
let foldl = __ipl_list_foldl
let foldr = __ipl_list_foldr
let fold = foldl
let iter = \f \lst . fold (\x \acc { f x; acc }) lst ()
let forall = __ipl_list_forall
let exists = __ipl_list_exists
let find = __ipl_list_find
let mapfind = __ipl_list_mapfind
let assoc = \f \lst \default . snd (find (f o fst) lst ((), default))
let split = __ipl_list_split
let split-n = __ipl_list_split_n
let split-once = split-n 1

//let length-q = __ipl_list_length_q
//let nth-q = __ipl_list_nth_q
//let hd-q = \qlst
//let head-q = __ipl_list_head_q
//let tail-q = __ipl_list_tail_q
//let take-q = \x \y (head-q y x)
//let put-q = __ipl_list_put_q
//let rev-q = __ipl_list_rev_q
//let append-q = __ipl_list_append_q
//let rev-append-q = __ipl_list_rev_append_q
//let map-q = __ipl_list_map_q
//let rev-map-q = __ipl_list_rev_map_q
//let filter-q = __ipl_list_filter_q
let foldl-q = __ipl_list_foldl_q
//let foldr-q = __ipl_list_foldr_q
let fold-q = foldl-q
let iter-q = \f \qlst . fold-q (\x \acc { f x; acc }) qlst ()
//let forall-q = __ipl_list_forall_q
//let exists-q = __ipl_list_exists_q
let find-q = __ipl_list_find_q
//let mapfind-q = __ipl_list_mapfind_q
//let assoc-q = \f \qlst \default . snd (find-q (f o fst) qlst ((), default))
//let split-q = __ipl_list_split_q
//let split-n-q = __ipl_list_split_n_q
//let split-once-q = split-n-q 1
