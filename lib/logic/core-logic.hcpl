/* core-logic.ipl: Illative logic rules. This is the 'kernel' of the logic
 * implementation. This file implements all basic reasoning rules. All other
 * rules and tactics are supposed to use rules from this file and NOT use
 * 'proof-of', and NOT use definitions from this file which are not a part
 * of the public interface (those prefixed with __hcpl_).
 *
 * Copyright (C) 2013 by Lukasz Czajka
 */

syntax operator of is right, binary, after appl;
syntax operator -> is right, binary, after of;
syntax operator c= is left, binary, after ->;

syntax operator in is left, binary, after =;
syntax operator => is right, binary, after or;
syntax operator <=> is left, binary, after =>;

symbol SuperType
symbol BigType
symbol Prop
symbol Any
symbol Data

symbol ALL
symbol EX
symbol ASSM
symbol SUB

symbol equal

macro(0) Type = \_ #< (BigType 0) >#
macro(0) LargeType = \_ #< (BigType 1) >#

let in = \&#x \&#y . y x
let of = \&#x \&#y . x y
let -> = \&#t1 \&#t2 \&#f (ALL t1 \x . f x in t2)
let => = \&#x \&#y . if x then y else true
let <=> = \x \y . (x => y) and (y => x)
let c= = \&#a \&#b (ALL a b)
let Set = \&#T (T -> Prop)

let extract-type = \x {
   match x with
   | '(%_ in %t) -> t
   | %_ -> error2 x "expected a formula of the form (a in b)"
}

let extract-elem = \x {
   match x with
   | '(%e in %_) -> e
   | %_ -> error2 x "expected a formula of the form (a in b)"
}

/*********************************************************************************/

rule pexpand = \a \p {
   let phi = goal p
   in
   if eq phi (reduce a) or eq phi (reduce-eta a) then
      proof-of a
   else
      error2 (phi, a) "pexpand: cannot expand"
}

rule pequal = \phi \p {
   if eq phi (goal p) then
      proof-of phi
   else
      error2 (phi, p) "pequal: wrong arguments"
}

rule preduce = \p {
   proof-of (reduce (goal p))
}

rule papply = \p {
   match goal p with
   | '(%a %b) when is-lambda a ->
      proof-of (apply a b)
   | %_ -> error2 p "papply: wrong argument"
}

rule preduce-eta = \p {
   proof-of (reduce-eta (goal p))
}

rule preduce-appl = \p {
   proof-of (reduce-appl (goal p))
}

rule peval = \p {
   proof-of (eval (goal p))
}

rule peval-limited = \lim \p {
   proof-of (eval-limited (goal p) lim)
}

let __hcpl_suppose_aux = \facts \phi \f {
   let p = f ((proof-of phi) :: facts)
   in
   match p with
   | proof-of %x -> proof-of '(ASSM phi x)
   | %_ -> error2 p "suppose: expected a proof"
}

macro suppose = \args {
   match args with
   | [%a] ->
      #< __hcpl_suppose_aux facts #a \facts .. >#
   | [%name, #< : >#, %a] ->
      #< let #$0 = #a; let #name = proof-of #$0; __hcpl_suppose_aux facts #$0 \facts .. >#
   | [%a, %b] ->
      #< __hcpl_suppose_aux facts #a \facts { #b } >#
   | [%a, #< in >#, %b] ->
      #< __hcpl_suppose_aux facts #a \facts { #b } >#
   | [%name, #< : >#, %a, %b] ->
      #< { let #$0 = #a; let #name = proof-of #$0; __hcpl_suppose_aux facts #$0 \facts { #b } } >#
   | [%name, #< : >#, %a, #< in >#, %b] ->
      #< { let #$0 = #a; let #name = proof-of #$0; __hcpl_suppose_aux facts #$0 \facts { #b } } >#
   | %_ -> error "suppose: wrong arguments"
};

rule impl-intro = \p1 \p2 {
   match goal p1, goal p2 with
   | ('(%b in Prop), '(ASSM %a %x)) ->
      if eq a b then
         proof-of '(a => x)
      else
         error2 p1 "impl-intro: bad typing derivation"
   | %_ -> error2 (p1, p2) "impl-intro: expected a typing derivation and a supposition"
}

rule impl-elim = \p1 \p2 {
   let form = goal p2
   in
   match goal p1 with
   | '(form => %p) -> proof-of p
   | %_ -> error2 p1 "impl-elim: expected implication"
}

rule impl-type-intro = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%phi1 in Prop), '(ASSM %phi2 (%psi in Prop)) ->
      if eq phi1 phi2 then
         proof-of '((phi1 => psi) in Prop)
      else
         error2 phi2 "impl-type-intro: wrong argument"
   | '(%phi in Prop), '(%psi in Prop) -> proof-of '((phi => psi) in Prop)
   | %_ -> error2 (p1, p2) "impl-type-intro: wrong arguments"
}

rule impl-type-elim = \p {
   match goal p with
   | '((%a => %_) in Prop) -> proof-of '(a in Prop)
   | %_ -> error2 p "impl-type-elim: wrong argument"
}

rule forall-intro = \p1 \f {
   let aux = \x \a \p2 {
      match goal p2 with
      | '(ASSM (x in %a1) %app) when eq a a1 ->
         begin
            match lift app x with
            | '(%phi x) -> proof-of '(ALL a phi)
            | %_ -> error2 p2 "forall-intro: bad proof"
         end
      | %_ -> error2 p2 "forall-intro: bad proof"
   };
   var-intro \x {
      let p2 = f x
      in
      match goal p1 with
      | '(%a in SuperType) -> aux x a p2
      | '(%a in BigType %_) -> aux x a p2
      | %_ -> error2 (p1, p2) "forall-intro: wrong arguments"
   }
};

rule forall-elim = \p1 \p2 {
   let aux = \a \phi \g2 {
      match g2 with
      | '(%t in %a1) when eq a a1 ->
         proof-of (apply phi t)
      | '(%a1 %t) when eq a a1 ->
         proof-of (apply phi t)
      | %_ ->
         error2 (p1, p2) "forall-elim: wrong arguments"
   };
   let g1 = goal p1
   let g2 = goal p2
   in
   match g1 with
   | '(ALL %a %phi) ->
      aux a phi g2
   | %_ -> {
      match reduce g1 with
      | '(ALL %a %phi) ->
         aux a phi g2
      | %_ ->
         error2 (p1, p2) "forall-elim: wrong arguments"
   }
};

rule forall-type-intro = \p1 \f {
   let aux = \x \a \p2 {
      match goal p2 with
      | '(ASSM (x in %a1) (%app in Prop)) when eq a a1 ->
         begin
            match lift app x with
            | '(%phi x) -> proof-of '((ALL a phi) in Prop)
            | %_ -> error2 p2 "forall-type-intro: bad proof"
         end
      | %_ -> error2 p2 "forall-type-intro: bad proof"
   };
   var-intro \x {
      let p2 = f x
      in
      match goal p1 with
      | '(%a in SuperType) -> aux x a p2
      | '(%a in BigType %_) -> aux x a p2
      | %_ -> error2 (p1, p2) "forall-type-intro: wrong arguments"
   }
};

rule exists-intro = \p1 \p2 \p3 {
   let aux = \a {
      match (goal p2, goal p3) with
      | ('(%t in %a1), '(%phi %t1)) when eq a a1 and eq t t1 ->
         proof-of '(EX a phi)
      | %_ -> error2 (p1, p2, p3) "exists-intro: wrong arguments"
   };
   match goal p1 with
   | '(%a in SuperType) -> aux a
   | '(%a in BigType %_) -> aux a
   | %_ -> error2 (p1, p2, p3) "exists-intro: wrong arguments"
};

rule exists-elim = \p1 \f {
   var-intro \x {
      let p2 = f x
      in
      match (goal p1, goal p2) with
      | ('(EX %a %phi), '(ASSM (x in %a1) (ASSM %app %psi))) when eq a a1 ->
         if occurs-check x psi then
            error2 (p1, p2) "exists-elim: the variable quantified over cannot occur in the conclusion"
         else {
            match lift app x with
            | '(%phi1 x) when eq phi phi1 -> proof-of psi
            | %_ -> error2 p2 "exists-elim: bad proof"
         }
      | %_ -> error2 (p1, p2) "exists-elim: wrong arguments"
   }
};

rule exists-type-intro = \p1 \f {
   let aux = \x \a \p2 {
      match goal p2 with
      | '(ASSM (x in %a1) (%app in Prop)) when eq a a1 ->
         begin
            match lift app x with
            | '(%phi x) -> proof-of '((EX a phi) in Prop)
            | %_ -> error2 p2 "exists-type-intro: bad proof"
         end
      | %_ -> error2 p2 "exists-type-intro: bad proof"
   };
   var-intro \x {
      let p2 = f x
      in
      match goal p1 with
      | '(%a in SuperType) -> aux x a p2
      | '(%a in BigType %_) -> aux x a p2
      | %_ -> error2 (p1, p2) "exists-type-intro: wrong arguments"
   }
}

rule or-intro-left = \p \right {
   let left = goal p
   in
   proof-of '(left or right)
}

rule or-intro-right = \left \p {
   let right = goal p
   in
   proof-of '(left or right)
}

rule or-intro = \x \y {
   match x with
   | proof-of %phi -> or-intro-left x y
   | %_ -> or-intro-right x y
}

rule or-elim = \p \p1 \p2 {
   match (goal p, goal p1, goal p2) with
   | ('(%a or %b), '(ASSM %a1 %c), '(ASSM %b1 %c1)) when eq a a1 and eq b b1 and eq c c1 ->
      proof-of c
   | ('(%a or %b), '(%a1 => %c), '(%b1 => %c1)) when eq a a1 and eq b b1 and eq c c1 ->
      proof-of c
   | ('(%a or %b), '(ASSM %a1 %c), '(%b1 => %c1)) when eq a a1 and eq b b1 and eq c c1 ->
      proof-of c
   | ('(%a or %b), '(%a1 => %c), '(ASSM %b1 %c1)) when eq a a1 and eq b b1 and eq c c1 ->
      proof-of c
   | %_ -> error2 (p, p1, p2) "or-elim: wrong arguments"
}

rule or-type-intro = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%phi in Prop), '(%psi in Prop) -> proof-of '((phi or psi) in Prop)
   | %_ -> error2 (p1, p2) "or-type-intro: wrong arguments"
}

rule and-intro = \p1 \p2 {
   let a = goal p1
   let b = goal p2
   in
   proof-of '(a and b)
}

rule and-elim-left = \p {
   match goal p with
   | '(%a and %_) -> proof-of a
   | %_ -> error2 p "and-elim-left: wrong argument"
}

rule and-elim-right = \p {
   match goal p with
   | '(%_ and %b) -> proof-of b
   | %_ -> error2 p "and-elim-right: wrong argument"
}

rule and-type-intro = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%a in Prop), '(%b in Prop) -> proof-of '((a and b) in Prop)
   | %_ -> error2 (p1, p2) "and-type-intro: wrong arguments"
}

rule equiv-intro = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%phi => %psi), '(%psi1 => %phi1) when eq phi phi1 and eq psi psi1 -> proof-of '(phi <=> psi)
   | %_ -> error2 (p1, p2) "equiv-intro: wrong arguments"
}

rule equiv-elim = \p1 \p2 {
   match goal p1 with
   | '(%phi <=> %psi) when eq phi (goal p2) -> proof-of psi
   | '(%phi <=> %psi) when eq psi (goal p2) -> proof-of phi
   | %_ -> error2 (p1, p2) "equiv-elim: wrong arguments"
}

rule equiv-type-intro = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%phi in Prop), '(%psi in Prop) ->
      proof-of '((phi <=> psi) in Prop)
   | '(ASSM %psi1 (%phi in Prop)), '(ASSM %phi1 (%psi in Prop)) when eq psi psi1 and eq phi phi1 ->
      proof-of '((phi <=> psi) in Prop)
   | '(ASSM %psi1 (%phi in Prop)), '(%psi in Prop) when eq psi psi1 ->
      proof-of '((phi <=> psi) in Prop)
   | '(%phi in Prop), '(ASSM %phi1 (%psi in Prop)) when eq phi phi1 ->
      proof-of '((phi <=> psi) in Prop)
   | %_ ->
      error2 (p1, p2) "equiv-type-intro: wrong arguments"
}

rule false-elim = \phi \p {
   match p with
   | proof-of false -> proof-of phi
   | %_ -> error2 p "false-elim: wrong argument"
}

/* TODO: not-* should be derived rules */

rule not-intro-2 = \p1 \p2 {
   match (goal p1, goal p2) with
   | ('(%a in Prop), '(ASSM %a1 false)) when eq a a1 ->
      proof-of '(not a)
   | %_ -> error2 (p1, p2) "not-intro-2: wrong arguments"
}

macro(1) not-intro-1 = \p #<{
   let #$0 = #p
   in
   match goal #$0 with
   | '(ASSM %a false) ->
      not-intro-2 (auto-type '(a in Prop)) #$0
   | %_ -> error2 #$0 "not-intro-1: wrong argument"
}>#

macro not-intro = \args {
   match args with
   | [%x] -> #< not-intro-1 #x >#
   | [%x, %y] -> #< not-intro-2 #x #y >#
   | %_ -> error "not-intro: wrong arguments"
}

rule not-elim = \p1 \p2 {
   let a = goal p1;
   let b = goal p2;
   if eq a '(not b) or eq '(not a) b then
      proof-of false
   else
      error2 (p1, p2) "not-elim: wrong arguments"
}

rule not-type-intro = \p {
   match goal p with
   | '(%g in Prop) -> proof-of '((not g) in Prop)
   | %_ -> error2 p "not-type-intro: wrong argument"
}

rule not-type-elim = \p {
   match goal p with
   | '((not %a) in Prop) -> proof-of '(a in Prop)
   | %_ -> error2 p "not-type-elim: wrong argument"
}

rule contradiction = \p {
   match goal p with
   | '((not %x) => false) -> proof-of x
   | '(not (not %x)) -> proof-of x
   | '((%x => false) => false) -> proof-of x
   | %_ -> error2 p "contradiction: wrong argument"
}

rule prop-intro = \p {
   let phi = goal p
   in
   proof-of '(phi in Prop)
}

let prop-type-intro = proof-of '(Prop in Type)

rule any-intro = \phi {
   proof-of '(phi in Any)
}

let any-type-intro = proof-of '(Any in Type)

rule bigtype-subset-bigtype-intro = \n \m {
   if is-number n and is-number m and n < m then {
      proof-of '(BigType n c= BigType m)
   } else
      error2 n "bigtype-subset-bigtype-intro: wrong arguments (expected two numbers: n, m where n < m)"
}

rule bigtype-subset-supertype-intro = \n {
   if is-number n then {
      proof-of '(BigType n c= SuperType)
   } else
      error2 n "bigtype-subset-supertype-intro: wrong argument (expected a number)"
}

rule bigtype-type-intro = \n \m {
   if is-number n and is-number m and n < m then {
      proof-of '(BigType n in BigType m)
   } else
      error2 n "bigtype-type-intro: wrong arguments (expected two numbers: n, m where n < m)"
}

rule fun-type-intro = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%a in BigType %n1), '(%b in BigType %n2) ->
      let n = max n1 n2
      in
      proof-of '((a -> b) in BigType n)
   | '(%a in BigType %_), '(%b in SuperType) -> proof-of '((a -> b) in SuperType)
   | '(%a in SuperType), '(%b in BigType %_) -> proof-of '((a -> b) in SuperType)
   | '(%a in SuperType), '(%b in SuperType) -> proof-of '((a -> b) in SuperType)
   | %_ -> error2 (p1, p2) "fun-type-intro: wrong arguments"
}

let data-type-intro = proof-of '(Data in Type)

rule number-type-intro = \n {
   if is-number n then
      proof-of '(n in Data)
   else
      error2 n "number-type-intro: not a number"
}

let false-type-intro = proof-of '(false in Prop)
let true-type-intro = proof-of '(true in Prop)

let true-intro = proof-of true

let faith = proof-of


/*****************************************************************************/
/* equality rules */

rule eq-intro = \a \b {
   if eq a b then
      proof-of '(a == b)
   else
      error2 (a, b) "equal-any-intro: not equal"
}

rule eq-refl-intro = \phi {
   proof-of '(phi == phi)
}

rule eq-elim = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%a == %b), '(%phi %b1) when eq b b1 -> proof-of '(phi a)
   | '(%b == %a), '(%phi %b1) when eq b b1 -> proof-of '(phi a)
   | '(%a == %b), %b1 when eq b b1 -> proof-of a
   | '(%b == %a), %b1 when eq b b1 -> proof-of a
   | %_ -> error2 (p1, p2) "eq-elim: wrong arguments"
}

rule eq-type-intro = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%x in Data), '(%y in Data) -> proof-of '((x == y) in Prop)
   | %_ -> error2 (p1, p2) "eq-type-intro: wrong arguments"
}

rule eq-cong = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%a == %b), '(%c == %d) -> proof-of '((a c) == (b d))
   | %_ -> error2 (p1, p2) "equal-any-cong: wrong arguments"
}

rule eq-sym = \p {
   match goal p with
   | '(%a == %b) -> proof-of '(b == a)
   | %_ -> error2 p "eq-sym: wrong argument"
}

rule eq-trans = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%a == %b), '(%b1 == %c) when eq b b1 -> proof-of '(a == c)
   | %_ -> error2 (p1, p2) "eq-trans: wrong arguments"
}

rule eq-if-intro = \phi \p {
   match phi with
   | '(if %c then %x else %y) when eq c (goal p) ->
      proof-of '(phi == x)
   | '(if %c then %x else %y) when eq '(not c) (goal p) ->
      proof-of '(phi == y)
   | %_ ->
      error2 (phi, p) "eq-if-intro: wrong arguments"
}

rule equal-sym = \p {
   match goal p with
   | '(equal %t %a %b) -> proof-of '(equal t b a)
   | %_ -> error2 p "equal-sym: wrong argument"
}

rule equal-trans = \p1 \p2 {
   match goal p1, goal p2 with
   | '(equal %t %a %b), '(equal %t1 %b1 %c) when eq b b1 and eq t t1 -> proof-of '(equal t a c)
   | %_ -> error2 (p1, p2) "equal-trans: wrong arguments"
}

rule equal-downgrade = \p1 \p2 {
   match goal p1, reduce-appl (goal p2) with
   | '(equal %t %a %b), '(ALL %s %t1) when eq t t1 ->
      proof-of '(equal s a b)
   | %_ -> error2 (p1, p2) "equal-downgrade: wrong arguments"
}

rule equal-prop-intro = \p {
   match goal p with
   | '(%a <=> %b) -> proof-of '(equal Prop a b)
   | %_ -> error2 p "equal-prop-intro: wrong argument"
}

rule equal-fun-intro = \p1 \p2 \p3 {
   match goal p1, goal p2, goal p3 with
   | '(%f in %a -> %b), '(%g in %a1 -> %b1), '(ALL %a2 (\x . equal %b2 (%f1 x) (%g1 x)))
      when eq a a1 and eq a1 a2 and eq b b1 and eq f f1 and eq g g1 ->
         proof-of '(equal (a -> b) f g)
   | %_ -> error2 (p1, p2, p3) "equal-fun-intro: wrong argument"
}

rule equal-fun-elim = \p1 \p2 {
   match goal p1, goal p2 with
   | '(equal (%a -> %b) %f %g), '(equal %a1 %x %y) when eq a a1 ->
      proof-of '(equal b (f x) (f y))
   | %_ -> error2 (p1, p2) "equal-fun-elim: wrong arguments"
}


/*****************************************************************************/
/* subtype rules */

rule subtype-intro-3 = \p1 \p2 \p3 {
   match goal p1, goal p2, goal p3 with
   | '(%f in %t -> Prop), '(%a in %t1), '(%f1 %a1) when eq a a1 and eq t t1 and eq f f1 ->
      proof-of '(a in SUB t f)
   | %_ -> error2 (p1, p2, p3) "subtype-intro: wrong arguments"
}

rule subtype-elim = \p {
   match goal p with
   | '(%a in SUB %t %f) -> proof-of '(f a)
   | %_ -> error2 p "subtype-elim: wrong argument"
}

rule subtype-elim-dom = \p {
   match goal p with
   | '(%a in SUB %t %f) -> proof-of '(a in t)
   | %_ -> error2 p "subtype-elim-dom: wrong argument"
}

rule subtype-type-intro-2 = \p1 \p2 {
   let aux = \t \tp {
      match goal p2 with
      | '(%f in %t1 -> Prop) when eq t t1 ->
         proof-of '(SUB f t in tp)
      | %_ ->
         error2 (p1, p2) "subtype-type-intro: wrong arguments"
   };
   match goal p1 with
   | '(%t in BigType %n) ->
      aux t '(BigType n)
   | '(%t in SuperType) ->
      aux t SuperType
   | %_ ->
      error2 (p1, p2) "subtype-type-intro: wrong arguments"
}

/*****************************************************************************/
/* datatype induction */
// TODO: this should be generalized

symbol Datatype
symbol Self

let mk-datatype = \lst {
   List.iter
      (\x {
         match x with
         | (%_, %_) -> ()
         | %_ -> error2 x "mk-datatype: bad list element"
      })
      lst;
   '(Datatype lst)
}

let is-datatype = \tp { match tp with '(Datatype %_) -> true | %_ -> false }

rule datatype-induction = \thesis \f {
   match thesis with
   | '(ALL %tp %phi) ->
      begin
         match tp with
         | '(Datatype %qlst) ->
            List.fold-q
               (\x \acc {
                  match x with
                  | '!(%s, %tpa) ->
                     let tp0 = if tpa == Self then tp else tpa;
                     var-intro \x {
                        let p = f x tp0 '(s x);
                        if tpa == Self then {
                           match goal p with
                           | '(ASSM (x in tp0) (ASSM %assm %t))
                              when eq assm '(phi x) and eq t '(phi (s x)) -> acc
                           | '(ASSM (x in tp0) (%assm => %t))
                              when eq assm '(phi x) and eq t '(phi (s x)) -> acc
                           | %_ -> error2 p "datatype-induction: bad proof"
                        } else {
                           let aux = \t {
                              match lift t (reduce '(s x)) with
                              | '(%phi %_) ->
                                 phi :: acc
                              | %_ ->
                                 error2 p "datatype-induction: bad proof"
                           };
                           let g = goal p;
                           match goal p with
                           | '(ASSM (x in tp0) %t) when eq t '(phi (s x)) -> acc
                           | %t when eq t '(phi (s x)) -> acc
                           | %_ -> error2 p "datatype-induction: bad proof"
                        }
                     }
                  | %_ -> error2 x "datatype-induction: bad list element"
               })
               qlst
               (proof-of '(ALL tp phi))
         | %_ ->
            error2 tp "datatype-induction: bad type"
      end
   | %_ ->
      error2 thesis "datatype-induction: bad thesis"
}

rule datatype-type-intro-3 = \tp \s \p {
   match tp with
   | '(Datatype %qlst) ->
      begin
         let t0 = extract-type (goal p)
         let t = if t0 == 'tp then Self else t0
         let e = extract-elem (goal p);
         let r =
            List.find-q
               (\x {
                  match x with
                  | '!(s, t) -> true
                  | %_ -> false
               })
               qlst
               ()
         in
         if r == () then
            error2 (tp, s, p) "datatype-type-intro: no match"
         else
            proof-of '(s e in tp)
      end
   | %_ ->
      error2 (tp, s, p) "datatype-type-intro: wrong arguments"
}

// TODO: This is wrong
rule datatype-in-type-intro = \tp {
   if is-datatype tp then
      proof-of '(tp in Type)
   else
      error2 tp "datatype-type-intro: wrong argument"
}
