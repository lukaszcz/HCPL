/* derived.hcpl: Derived rules and lemmas which don't require standard proof
 * tactics.
 *
 * Copyright (C) 2013 by Lukasz Czajka
 */

rule subset-intro = \p {
   match goal p with
   | '(ALL %a %b) ->
      pequal '(a c= b) p
   | %_ -> error2 p "subset-intro: wrong argument"
}

rule subset-elim = \p1 \p2 {
   let aux1 = \x \b \p1 \p2 {
      pexpand '(x in b) (forall-elim p1 p2)
   };
   let aux2 = \a \b \p1 \p2 {
      match goal p2 with
      | '(%x in %a1) when eq a a1 ->
         aux1 x b p1 p2
      | '(%a1 %x) when eq a a1 ->
         aux1 x b p1 p2
      | %_ ->
         error2 p2 "subset-elim: wrong second argument"
   };
   match goal p1 with
   | '(%a c= %b) ->
      aux2 a b (preduce-appl p1) p2
   | '(ALL %a %b) ->
      aux2 a b p1 p2
   | %_ ->
      error2 p1 "subset-elim: wrong first argument"
}

rule bigtype-to-supertype = \p {
   match goal p with
   | '(%a in BigType %n) ->
      subset-elim (bigtype-subset-supertype-intro n) p
   | %_ ->
      error2 p "bigtype-to-type: wrong argument"
}

rule bigtype-upgrade = \m \p {
   match goal p with
   | '(%a in BigType %n) when n <= m ->
      subset-elim (bigtype-subset-bigtype-intro n) p
   | %_ ->
      error2 (m, p) "bigtype-to-type: wrong arguments"
}

rule bigtype-in-supertype = \n {
   bigtype-to-supertype (bigtype-type-intro n (n + 1))
}

rule subtype-intro-2 = \p1 \p2 {
   match goal p1, goal p2 with
   | '(%a in %t), '(%f %a1) when eq a a1 ->
      pequal '(a in sub t f) (and-intro p1 p2)
   | %_ -> error2 (p1, p2) "subtype-intro-2: wrong arguments"
}

rule subtype-elim = \p {
   and-elim-right (preduce-appl (preduce-appl p))
}

rule subtype-elim-dom = \p {
   and-elim-left (preduce-appl (preduce-appl p))
}
