/* macros.ipl: Convenience logic macros.
 *
 * Copyright (C) 2013 by Lukasz Czajka
 */

macro(1) remember = \p #< def facts = (#p) :: facts; >#


macro lemma = \args {
   match args with
   | [%name, %formula, %xproof] ->
      #<
         let #$0 = #formula;
         let #name = verify #$0 { let thesis = #$0; trace-with #$file #$line #$column "lemma" (#xproof) };
      >#
   | [%formula, %xproof] ->
      #<
         let #$0 = #formula;
         verify #$0 { let thesis = #$0; trace-with #$file #$line #$column "lemma" (#xproof) }
      >#
   | %_ -> error "lemma: wrong arguments"
}

macro theorem = \args { mk-apply #< lemma ># args }

macro axiom = \args {
   match args with
   | [%name, %phi] -> #< let #name = proof-of (#phi); >#
   | [%phi] -> #< remember (proof-of (#phi)) >#
   | %_ -> error "axiom: wrong arguments"
}

let __ipl_ex_all_aux = \args \quant \msg {
   match List.split-once (== #< : >#) args with
   | [%lst1, %lst2] ->
      begin
         let pr =
            begin
               match List.split-once (== #< . >#) lst2 with
               | [%_] ->
                  let len = List.length lst2
                  in
                  (join-tokens-list (List.head lst2 (len - 1)), List.nth lst2 (len - 1))
               | [%lst3, %lst4] ->
                  (join-tokens-list lst3, join-tokens-list lst4)
               | %_ -> error msg
            end
         in
         let tp = fst pr;
         let rest = snd pr;
         let aux = \lst {
            match lst with
            | [%x] :: %t ->
               join-tokens #< #quant (#tp) \#x . ># (aux t)
            | [] -> #< >#
            | %_ -> error msg
         };
         let h = aux (List.split (== #< , >#) lst1)
         in
         #< #h #rest >#
      end
   | %_ -> error msg
}

macro ex = \args { __ipl_ex_all_aux args #< EX ># "ex: wrong arguments" }
macro all = \args { __ipl_ex_all_aux args #< ALL ># "all: wrong arguments" }


macro(0) last = \_ #< (hd facts) >#

macro assume = \args {
   let get-block = \lst {
      match List.rev lst with
      | %b :: #< in ># :: %_ -> b
      | %_ -> ()
   };
   let get-type = \lst {
      match List.rev lst with
      | %_ :: #< in ># :: %t -> join-tokens-list (List.rev t)
      | %_ -> join-tokens-list lst
   };
   let aux = \name \assm \tp \block {
      let tp2 = if tp == () then #< (auto-type '(#$0 in Prop)) ># else #< (#tp) >#;
      let trace-tok = #< trace-with #$file #$line #$column "assume">#;
      if name == () and block == () then
         #<
            ;#trace-tok $..
            let #$0 = #assm;
            impl-intro #tp2 $..
            suppose #$0;
         >#
      else if name == () then
         #< (#trace-tok { let #$0 = #assm in impl-intro #tp2 (suppose #$0 #block) }) >#
      else if block == () then
         #<
            ;#trace-tok $..
            let #$0 = #assm;
            let #name = proof-of #$0;
            impl-intro #tp2 $..
            suppose #$0;
         >#
      else
         #< (#trace-tok { let #$0 = #assm in impl-intro #tp2 (suppose #name : #$0 #block) }) >#
   };
   match args with
   | [%a] ->
      aux () a () ()
   | [%name, #< : >#, %a] ->
      aux name a () ()
   | %name :: #< : ># :: %a :: #< with ># :: %t ->
      aux name a (get-type t) (get-block t)
   | [%name, #< : >#, %a, #< in >#, %b] ->
      aux name a () b
   | [%name, #< : >#, %a, %b] ->
      aux name a () b
   | %a :: #< with ># :: %t ->
      aux () a (get-type t) (get-block t)
   | [%a, %b] ->
      aux () a () b
   | [%a, #< in >#, %b] ->
      aux () a () b
   | %_ ->
      error "assume: wrong arguments"
};

macro fix = \args {
   let aux = \vars \tp \tp-deriv \body {
      match vars with
      | %h :: %t ->
         let r = aux t tp tp-deriv body
         in
         #< trace-with #$file #$line #$column "fix" $. forall-intro (#tp-deriv) \#h .. suppose '(#h in (#tp)); #r >#
      | [] -> body
   };
   match List.split-once (== #< : >#) args with
   | [%lst1, %lst2] ->
      let vars =
         List.map (\x . match x with [%y] -> y | %_ -> error "fix: wrong arguments")
         <<
         List.split (== #< , >#) lst1
      in
      begin
         match List.split-once (== #< with >#) lst2 with
         | [%_] ->
            begin
               match List.split-once (== #< in >#) lst2 with
               | [%_] ->
                  let tp = join-tokens-list lst2
                  in
                  aux vars tp #< (auto-type '((#tp) in SuperType)) ># #< >#
               | [%a, %b] ->
                  let tp = join-tokens-list a
                  in
                  let body = join-tokens-list b
                  in
                  let r = aux vars tp #< (auto-type '((#tp) in SuperType)) ># body
                  in
                  #< (#r) >#
               | %_ -> error "fix: wrong arguments"
            end
         | [%lst3, %lst4] ->
            begin
               let tp = join-tokens-list lst3
               in
               match List.split-once (== #< in >#) lst4 with
               | [%_] ->
                  let tp-deriv = join-tokens-list lst4
                  in
                  aux vars tp tp-deriv #< >#
               | [%a, %b] ->
                  let tp-deriv = join-tokens-list a
                  in
                  let body = join-tokens-list b
                  in
                  let r = aux vars tp tp-deriv body
                  in
                  #< (#r) >#
               | %_ -> error "fix: wrong arguments"
            end
         | %_ -> error "fix: wrong arguments"
      end
   | %_ -> error "fix: wrong arguments"
};

macro obtain = \args {
   let aux = \v \p \b {
      if b == () then
         #<
            ;trace-with #$file #$line #$column "obtain" $..
            let #$0 = (#p)
            in
            exists-elim #$0 \#v ..
               let #$1 =
                  match goal #$0 with
                  | '(EX %alpha %phi) -> (alpha, phi)
                  | %_ -> error2 #$0 "obtain: expected a proof of an existential formula"
               in
               let #$2 = fst #$1;
               let #$3 = snd #$1;
               suppose '(#v in #$2);
               suppose '(#$3 #v);
         >#
      else
         #<{
            ;trace-with #$file #$line #$column "obtain" $..
            let #$0 = (#p)
            in
            exists-elim #$0 \#v {
               match goal #$0 with
               | '(EX %alpha %phi) ->
                  begin
                     suppose '(#v in alpha);
                     suppose '(phi #v);
                     #b
                  end
               | %_ ->
                  error2 #$0 "obtain: expected a proof of an existential formula"
            }
         }>#
   };
   match args with
   | %v :: #< from ># :: %t ->
      begin
         match List.split-once (== #< in >#) t with
         | [%_] ->
            let p = join-tokens-list t
            in
            aux v p ()
         | [%lst1, %lst2] ->
            let p = join-tokens-list lst1
            let b = join-tokens-list lst2
            in
            aux v p b
         | %_ ->
            error "obtain: wrong arguments"
      end
   | [%v, %p, %b] ->
      aux v p b
   | [%v, %p] ->
      aux v p ()
   | %_ -> error "obtain: wrong arguments"
};

macro take = \args {
   let aux2 = \v \tp \tp-deriv \value \value-tp-deriv \block {
      /* #$0 - value, #$1 - tp, #$2 - tp-deriv, #$3 - value-tp-deriv */
      let tp-code =
         if tp == () and tp-deriv == () then {
            let vtp-code =
               if value-tp-deriv == () then
                  #< let #$3 = infer-type #$0 >#
               else
                  #< let #$3 = (#value-tp-deriv) >#
            in
            #< #vtp-code; let #$1 = extract-type (goal #$3); let #$2 = (auto-type '(#$1 in SuperType)); >#
         } else {
            let vtp-code = if value-tp-deriv == () then #< let #$3 = auto-type '(#$0 in #$1) ># else value-tp-deriv
            in
            if tp == () then
               #< let #$2 = (#tp-deriv); let #$1 = extract-type (goal #$2); #vtp-code >#
            else if tp-deriv == () then
               #< let #$1 = (#tp); let #$2 = (auto-type '(#$1 in SuperType)); #vtp-code >#
            else
               #< let #$1 = (#tp); let #$2 = (#tp-deriv); #vtp-code >#
         }
      in
      if block == () then
         #<
            ;trace-with #$file #$line #$column "take" $..
            let #$0 = (#value);
            #tp-code;
            exists-intro #$2 #$3 $..
               let #$4 = unique-int ();
               let #v = mark (#$0) #$4;
               (\#$5 {
                  let #$6 = lift-marked (goal #$5) #$4
                  in
                  pexpand '(#$6 #$0) #$5
               }) $..
         >#
      else
         #<{
            trace-with #$file #$line #$column "take" $..
            let #$0 = (#value);
            #tp-code;
            exists-intro #$2 #$3 {
               let #$4 = unique-int ();
               let #v = mark (#$0) #$4;
               let #$5 = (#block);
               let #$6 = lift-marked (goal #$1) #$0
               in
               pexpand '(#$6 #$0) #$4
            }
         }>#
   };
   let aux1 = \v \tp \tp-deriv \lst {
      match List.split-once (== #< with >#) lst with
      | [%lst1, %lst2] ->
         begin
            let value = join-tokens-list lst1;
            match List.split-once (== #< in >#) lst2 with
            | [%lst3, %lst4] ->
               let value-tp-deriv = join-tokens-list lst3
               let b = join-tokens-list lst4
               in
               aux2 v tp tp-deriv value value-tp-deriv b
            | %_ ->
               let value-tp-deriv = join-tokens-list lst2
               in
               aux2 v tp tp-deriv value value-tp-deriv ()
         end
      | %_ ->
         begin
            match List.split-once (== #< in >#) lst with
            | [%lst1, %lst2] ->
               let value = join-tokens-list lst1
               let b = join-tokens-list lst2
               in
               aux2 v tp tp-deriv value () b
            | %_ ->
               let value = join-tokens-list lst
               in
               aux2 v tp tp-deriv value () ()
         end
   };
   match args with
   | %v :: #< : ># :: %t ->
      begin
         match List.split-once (== #< with >#) t with
         | [%lst1, %lst2] ->
            begin
               match List.split-once (== #< = >#) lst2 with
               | [%lst3, %lst4] ->
                  let tp = join-tokens-list lst1;
                  let tp-deriv = join-tokens-list lst3
                  in
                  aux1 v tp tp-deriv lst4
               | %_ ->
                  error "take: wrong arguments: expected: ="
            end
         | %_ ->
            begin
               match List.split-once (== #< = >#) t with
               | [%lst1, %lst2] ->
                  let tp = join-tokens-list lst1
                  in
                  aux1 v tp () lst2
               | %_ ->
                  error "take: wrong arguments: expected: ="
            end
      end
   | %v :: #< = ># :: %t ->
      aux1 v () () t
   | %_ ->
      error "take: wrong arguments"
}

macro show = \args {
   let aux = \name \formula \p {
      #<
         ;trace-with #$file #$line #$column "show" $..
         let #$0 = #formula;
         let #name = verify #$0 #p;
         remember #name;
         #name
      >#
   };
   let pr =
      match args with
      | %name :: #< : ># :: %rest -> (name, rest)
      | %_ -> (#< #$1 >#, args)
   in
   let name = fst pr
   let lst0 = snd pr
   in
   match lst0 with
   | %formula :: #< by ># :: %lst1 ->
      begin
         match lst1 with
         | %tac :: #< from ># :: %lst2 ->
            let facts = join-tokens-list lst2
            in
            aux name formula #< (call-tactic-with #tac [#facts] #$0) >#
         | [%tac] ->
            aux name formula #< (#tac #$0) >#
         | %_ ->
            error "show: wrong arguments"
      end
   | %formula :: #< with ># :: %lst1 ->
      let p = join-tokens-list lst1
      in
      aux name formula #< (#p) >#
   | %formula :: #< from ># :: %lst1 ->
      let facts = join-tokens-list lst1
      in
      aux name formula #< (call-tactic-with auto [#facts] #$0) >#
   | [%formula] ->
      aux name formula #< (auto #$0) >#
   | %_ ->
      error "show: wrong arguments"
};
