/* logic.ipl: Illative logic implementation.
 *
 * Copyright (C) 2013 by Lukasz Czajka
 */

import List;

syntax block proof qed;

syntax macrosep axiom;
syntax macrosep lemma;
syntax macrosep theorem;
syntax macrosep tactic;
syntax macrosep rule;
syntax macrosep remember;

let error2 = \p \&#msg { error (msg ^ ": " ^ (to_string p)) }

symbol VAR

let proof-of = \x (`__hcpl_proof, x)
let goal = \p { match p with (`__hcpl_proof, %x) -> x | %_ -> error2 p "expected a proof" }
let pgoal = \p { match p with (`__hcpl_proof, %x) -> x | %_ -> true }
let is-proof = \p . matches p (`__hcpl_proof, %_)


/*********************************************************************************/
/* helper functions & macros */

let var-intro = \f {
   let x = unique-int ()
   in
   f '(VAR x)
}

let lambda-body = \f { var-intro \x { apply f x } };

let get-tactic-name = \tac { join-symbols tac (join-symbols #< - ># #< tactic >#) }
let get-rule-name = \tac { join-symbols tac (join-symbols #< - ># #< rule >#) }

let mk-tactic-apply = \f \args { mk-apply f (#< facts ># :: args) }
let mk-rule-apply = mk-tactic-apply

macro(2) mk-tactic-call = \x \y {
   let tac-id = get-tactic-name x
   let z = mk-tokens [tac-id]
   in
   #< mk-tactic-apply #z #y >#
}

macro(2) mk-rule-call = \x \y {
   let tac-id = get-rule-name x
   let z = mk-tokens [tac-id]
   in
   #< mk-rule-apply #z #y >#
}

let mk-tactic-or-rule = \name \mkcall-tok \get-name \id \eq-tok {
   if eq-tok != #< = ># then
      error (name ^ ": expected '=' after " ^ name ^ " name")
   else {
      let tac-id = get-name id
      let s = to_tokens (tokens-to-string id)
      in
      #<
         macro #id = \args {
            join-tokens
               << join-tokens #< trace-with # #$file # #$line # #$column #s { ># (#mkcall-tok #id args)
               << #< } >#
         };
         let #tac-id = \facts
      >#
   }
}

macro(2) tactic = \id \eq-tok { mk-tactic-or-rule "tactic" #< mk-tactic-call ># get-tactic-name id eq-tok }
macro(2) rule = \id \eq-tok { mk-tactic-or-rule "rule" #< mk-rule-call ># get-rule-name id eq-tok }

macro call-tactic-with = \args {
   match args with
   | %tac :: %facts :: %t ->
      begin
         let t2 = join-tokens-list t
         let tac2 = get-tactic-name tac
         in
         #< #tac2 #facts #t2 >#
      end
   | %_ -> error "call-tactic-with: wrong arguments"
}

let eval-limit = 10000
let eq-limit = 500

let eq = \x \y {
   let aux0 = \x \y \lim0 {
      let aux = \x \y \lim {
         if x == y then
            true
         else if lim == 0 then {
            let xe = eval-limited x eval-limit;
            let ye = eval-limited y eval-limit;
            if xe == ye then {
               true
            } else {
               // TODO: and, or etc should not be different from ordinary application
               match xe, ye with
               | '(%a1 and %b1), '(%a2 and %b2) ->
                  aux0 a1 a2 (lim0 - 1) and aux0 b1 b2 (lim0 - 1)
               | '(%a1 or %b1), '(%a2 or %b2) ->
                  aux0 a1 a2 (lim0 - 1) and aux0 b1 b2 (lim0 - 1)
               | '(%a1 == %b1), '(%a2 == %b2) ->
                  aux0 a1 a2 (lim0 - 1) and aux0 b1 b2 (lim0 - 1)
               | '(if %c1 then %a1 else %b1), '(if %c2 then %a2 else %b2) ->
                  aux0 c1 c2 (lim0 - 1) and aux0 a1 a2 (lim0 - 1) and aux0 b1 b2 (lim0 - 1)
               | '(%a1 %b1), '(%a2 %b2) ->
                  aux0 a1 a2 (lim0 - 1) and aux0 b1 b2 (lim0 - 1)
               | '(\x %_), '(\x %_) ->
                  var-intro \x {
                     aux0 (apply xe x) (apply ye x) (lim0 - 1)
                  }
               | %_ ->
                  false
            }
         } else {
           let rx = reduce-appl x
           let ry = reduce-appl y
           let xe = reduce-eta x
           let ye = reduce-eta y
           in
           if rx == y or x == ry or xe == y or xe == ry or x == ye or rx == ye then
              true
           else
              aux rx ry (lim - 1)
         }
      };
      if lim0 == 0 then
         false
      else
         aux x y 2
   };
   aux0 x y eq-limit
}

let is-in-list = \lst \x {
   List.exists (eq x o goal) lst
}

let find-in-list = \lst \x {
   List.find (eq x o goal) lst ()
}

let check-in-list = \lst \x \emsg {
   let p = find-in-list lst x
   in
   if is-proof p then
      p
   else
      error2 x emsg
}

let match-in-list-aux = \lst \pat \acc {
   List.fold (\h . if matches (goal h) pat then h :: acc else acc) lst acc
}

let match-in-list = \lst \pat {
   match-in-list-aux lst pat []
}

let match-first-in-list = \lst \pat {
   List.find (\x . matches (goal x) pat) lst ()
}


/*********************************************************************************/

let verify = \phi \p {
   if eq phi (goal p) then
      proof-of phi
   else
      error2 p ("not a proof of " ^ to_string phi)
}

/*********************************************************************************/
/* logic rules */

include "logic/core-logic.hcpl"

/*********************************************************************************/
/* convenience macros */

include "logic/macros.hcpl"

/*********************************************************************************/
/* derived rules and lemmas */

include "logic/derived.hcpl"

/*********************************************************************************/
/* core proof tactics */

include "tactics/fact.hcpl"
include "tactics/auto-type.hcpl"
include "tactics/auto.hcpl"

/*********************************************************************************/
/* derived rules and lemmas which require standard proof tactics */

include "logic/derived2.hcpl";

/*********************************************************************************/

let facts = [true-intro, true-type-intro, false-type-intro, data-type-intro, any-type-intro, prop-type-intro];
