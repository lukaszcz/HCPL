/* auto-type.ipl: Automatic typing proof tactic.
 *
 * Copyright (C) 2013 by Lukasz Czajka
 */

symbol TVAR

let t-var-intro = \f {
   let x = unique-int ()
   in
   f '(TVAR x)
}

let t-subst = \t \s {
   match t with
   | '(TVAR %x) ->
      s t
   | '(%t1 -> %t2) ->
      let t1a = t-subst t1 s
      let t2a = t-subst t2 s
      in
      '(t1a -> t2a)
   | %_ ->
      t
}

let t-solve = \lst \assoc {
   let aux = \x \t \lst \assoc {
      if occurs-check x t then
         error "unification failure: occurs-check failed"
      else {
         let xt = \z . t-subst z \y . if y == x then t else y
         let lst1 = List.map (\pr . (xt (fst pr), xt (snd pr))) lst
         let assoc1 = List.map (\pr . (fst pr, xt (snd pr))) assoc
         in
         t-solve lst1 ((x,t) :: assoc1)
      }
   };
   match lst with
   | [] ->
      assoc
   | ('(TVAR %x), '(TVAR %x1)) :: %lst1 when x == x1 ->
      t-solve lst1 assoc
   | ('(TVAR %x), %t) :: %lst1 ->
      aux '(TVAR x) t lst1 assoc
   | (%t, '(TVAR %x)) :: %lst1 ->
      aux '(TVAR x) t lst1 assoc
   | ('(%tpa1 -> %tpa2), '(%tpb1 -> %tpb2)) :: %lst1 ->
      t-solve ((tpa1, tpb1) :: (tpa2, tpb2) :: lst1) assoc
   | (%ta, %tb) :: %lst1 when ta == tb ->
      t-solve lst1 assoc
   | %_ ->
      error "unification failure"
}

let t-unify = \t1 \t2 {
   let assoc = t-solve [(t1, t2)] []
   in
   \t . t-subst t \x . List.assoc (== x) assoc x
}

let t-match = \t \pat {
   let aux = \lst \assoc {
      match lst with
      | [] ->
         assoc
      | ('(TVAR %x), %t) :: %lst1 ->
         let t1 = List.assoc (== x) assoc `dummy
         in
         if t1 == `dummy then
            aux lst1 (('(TVAR x), t) :: assoc)
         else if t == t1 then
            aux lst1 assoc
         else
            error2 (t, pat) "match failure"
      | ('(%ta1 -> %ta2), '(%tb1 -> %tb2)) :: %lst1 ->
         aux ((ta1, tb1) :: (ta2, tb2) :: lst1) assoc
      | (%t1, %t2) :: %lst1 when t1 == t2 ->
         aux lst1 assoc
      | %_ ->
         error2 (t, pat) "match failure"
   };
   let assoc = aux [(pat, t)] []
   in
   \t . t-subst t \x . List.assoc (== x) assoc x
}

tactic match-type = \phi \pat {
   let p =
      List.mapfind
         (\p {
            match goal p with
            | '(%psi in BigType %n) when eq phi psi and matches SuperType pat ->
               bigtype-to-supertype (pequal '(phi in BigType n) p)
            | '(%psi in %t) when eq phi psi and matches t pat ->
               pequal '(phi in t) p
            | %_ -> ()
         })
         facts
         ()
   in
   if p == () then {
      if matches Data pat then {
         let x = eval-limited phi eval-limit;
         if is-number x then {
            pequal '(phi in Data) (number-type-intro x)
         } else
            ()
      } else
         ()
   } else
      p
};

tactic infer-typecast = \a \b {
   if eq a b then
      \x x
   else if b == Any then {
      \pa { any-intro (extract-elem (goal pa)) }
   } else {
      let p = find-fact '(ALL a b);
      if p != () then {
         \pa {
            match goal pa with
            | '(%x in %a1) when eq a1 a ->
               pequal '(x in b) (forall-elim p pa)
            | '(%a1 %x) when eq a1 a ->
               pequal '(x in b) (forall-elim p pa)
            | %_ ->
               error2 pa "infer-typecast: bad proof"
         }
      } else
         error ("infer-typecast failed on: " ^ (a, b))
   }
};

rule typecast = \b \p {
   match goal p with
   | '(%x in %a) ->
      infer-typecast a b p
   | %_ ->
      error2 (p, b) "typecast: wrong arguments"
};

forward auto-type-tactic;

/* TODO: Type inference is _very_ inefficient. Substitutions should not be represented as functions. */

/* (infer-type-proc phi) returns a triple: (type, f, s) where (type) may contain free
   t-variables and f is a function which given (facts), (v-assoc) and an appropriate
   substitution function returns a proof of '(phi1 in type) where phi1 is phi with
   variables substituted according to v-assoc; s is a substitution used internally (s type = type) */
let infer-type-proc = \facts \phi {
   let mk-data = \tp \f \s (tp, f, s)
   let get-type = \d . fst d
   let get-fun = \d . fst (snd d)
   let get-subst = \d . snd (snd d)
   let aux = \phi \context {
      let aux2 = \a \b \tp \arule {
         let da = aux a context
         let db = aux b context
         let sa = t-match tp (get-type da)
         let sb = t-match tp (get-type db)
         in
         mk-data
            << tp
            << \facts \v-assoc \s {
                  arule facts ((get-fun da) facts v-assoc (s o sa)) ((get-fun db) facts v-assoc (s o sb))
               }
            << sa o (get-subst da) o sb o (get-subst db)
      };
      let quant-aux = \a \b \qintro {
         var-intro \x {
            let da = aux a context
            let db = aux (apply b x) ('(x in a) :: context);
            let sa = t-match SuperType (get-type da)
            let sb = t-match Prop (get-type db)
            in
            mk-data
               << Prop
               << \facts \v-assoc \s {
                     qintro facts ((get-fun da) facts v-assoc (s o sa)) \y {
                        suppose '(y in a);
                        (get-fun db) facts ((x, y) :: v-assoc) (s o sb)
                     }
                  }
               << sa o (get-subst da) o sb o (get-subst db)
         }
      };
      let p = match-type phi %_;
      match pgoal p with
      | '(%_ in %tp) ->
         mk-data tp (\_ \_ \_ p) (\x x)
      | %_ -> {
         let psi = List.find (\x . matches x '(phi in %_)) context ();
         match psi with
         | '(%_ in %v) ->
            mk-data
               << v
               << \facts \v-assoc \s {
                     let sv = s v;
                     let y = List.assoc (== phi) v-assoc ();
                     find-fact '(y in sv)
                  }
               << \x x
         | %_ -> {
            match phi with
            | '(%a and %b) ->
               aux2 a b Prop and-type-intro-rule
            | '(%a or %b) ->
               aux2 a b Prop or-type-intro-rule
            | '(%a => %b) ->
               aux2 a b Prop impl-type-intro-rule
            | '(%a <=> %b) ->
               aux2 a b Prop equiv-type-intro-rule
            | '(not %a) ->
               let da = aux a context
               let sa = t-match Prop (get-type da)
               in
               mk-data
                  << Prop
                  << \facts \v-assoc \s {
                        not-type-intro ((get-fun da) facts v-assoc (s o sa))
                     }
                  << sa o (get-subst da)
            | '(%a == %b) ->
               let da = aux a context
               let db = aux b context;
               let fa = \facts \v-assoc \s (infer-typecast (get-type da) Data (get-fun da facts v-assoc s))
               let fb = \facts \v-assoc \s (infer-typecast (get-type db) Data (get-fun db facts v-assoc s))
               in
               mk-data
                  << Prop
                  << \facts \v-assoc \s {
                        eq-type-intro (fa facts v-assoc s) (fb facts v-assoc s)
                     }
                  << (get-subst da) o (get-subst db)
            | '(ALL %a %b) ->
               quant-aux a b forall-type-intro-rule
            | '(EX %a %b) ->
               quant-aux a b exists-type-intro-rule
            | '(%a -> %b) ->
               /* TODO: this is not completely OK */
               aux2 a b SuperType fun-type-intro-rule
            | '(Datatype %_) ->
               // TODO: This is not completely OK
               mk-data
                  << SuperType
                  << \facts \v-assoc \s {
                        bigtype-to-supertype (datatype-in-type-intro phi)
                     }
                  << \x x
            | '(%a %b) ->
               t-var-intro \v {
                  let da = aux a context
                  let db = aux b context
                  let ta = get-type da
                  let tb = get-type db
                  let fa = get-fun da
                  let fb = get-fun db
                  let s1 = t-unify ta '(tb -> v)
                  let tb1 = s1 v
                  in
                  mk-data
                     << tb1
                     << \facts \v-assoc \s {
                           let s2 = s o s1;
                           forall-elim
                              (preduce (fa facts v-assoc s2))
                              (fb facts v-assoc s2)
                        }
                     << s1 o (get-subst da) o (get-subst db)
               }
            | '(\x %_) ->
               t-var-intro \v {
                  var-intro \x {
                     let d = aux (apply phi x) ('(x in v) :: context)
                     let t = get-type d
                     let f = get-fun d
                     let s0 = get-subst d
                     let tv = s0 v
                     in
                     mk-data
                        << '(tv -> t)
                        << \facts \v-assoc \s {
                              let st = s t;
                              let tp = s tv;
                              fix y : tp with (auto-type-tactic facts '(tp in SuperType));
                              f facts ((x, y) :: v-assoc) s
                           }
                        << s0
                  }
               }
            | %_ ->
               error ("infer-type failed on: " ^ to_string phi)
         }
      }
   };
   aux phi []
}

tactic infer-type = \phi {
   let d = infer-type-proc facts phi
   in
   (fst (snd d)) facts [] (\t . t-subst t \_ Any)
}

tactic auto-type = \phi {
   let do-infer-type = \phi \tp {
      let d = infer-type-proc facts phi;
      let t = fst d
      let f = fst (snd d)
      let s = t-match tp t
      in
      show '(phi in tp) with {
         f facts [] ((\t . t-subst t \_ Any) o s)
      }
   };
   let p = find-fact phi;
   if is-proof p then
      p
   else {
      match phi with
      | '((%a and %b) in Prop) ->
         and-type-intro (auto-type '(a in Prop)) (auto-type '(b in Prop))
      | '((%a or %b) in Prop) ->
         or-type-intro (auto-type '(a in Prop)) (auto-type '(b in Prop))
      | '((%a => %b) in Prop) ->
         impl-type-intro (auto-type '(a in Prop)) { suppose a; auto-type '(b in Prop) }
      | '((%a <=> %b) in Prop) ->
         equiv-type-intro {
            suppose b;
            auto-type '(a in Prop)
         }{
            suppose a;
            auto-type '(b in Prop)
         }
      | '((not %a) in Prop) ->
         not-type-intro (auto-type '(a in Prop))
      | '((%a == %b) in Prop) ->
         try-else {
            eq-type-intro (auto-type '(a in Data)) (auto-type '(b in Data))
         }{
            let p = infer-type '(a == b);
            match goal p with
            | '(%_ in Prop) -> p
            | %_ -> error ("auto-type failed on: " ^ to_string phi)
         }
      | '((ALL %a %b) in Prop) ->
         forall-type-intro (auto-type '(a in SuperType)) \x {
            suppose '(x in a);
            let b1 = apply b x;
            auto-type '(b1 in Prop)
         }
      | '((EX %a %b) in Prop) ->
         exists-type-intro (auto-type '(a in SuperType)) \x {
            suppose '(x in a);
            let b1 = apply b x;
            auto-type '(b1 in Prop)
         }
      | '((%a -> %b) in BigType %n) ->
         fun-type-intro (auto-type '(a in BigType n)) (auto-type '(b in BigType n))
      | '((%a -> %b) in SuperType) ->
         fun-type-intro (auto-type '(a in SuperType)) (auto-type '(b in SuperType))
      | '(%a %b in %tp) ->
         begin
            let pa = match-type a '(%_ -> %_);
            match pgoal pa with
            | '(%_ in (%tb -> %_)) ->
               forall-elim
                  (preduce pa)
                  (auto-type '(b in tb))
            | %_ -> {
               let pb = match-type b %_;
               match pgoal pb with
               | '(%_ in %tb) ->
                  forall-elim
                     (preduce (auto-type '(a in tb -> tp)))
                     pb
               | %_ ->
                  if is-lambda a then {
                     try-else {
                        let c = apply a b;
                        auto-type '(c in tp)
                     }{
                        do-infer-type '(a b) tp
                     }
                  } else
                     do-infer-type '(a b) tp
            }
         end
      | '(%f in %t1 -> %t2) ->
         if is-lambda f then {
            fix x : t1;
            let b = apply f x;
            auto-type '(b in t2)
         } else
            error ("auto-type failed on: " ^ to_string phi)
      | %_ ->
         error ("auto-type failed on: " ^ to_string phi)
   }
};

