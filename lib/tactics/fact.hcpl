/* fact.ipl: 'fact' proof tactic.
 *
 * Copyright (C) 2013 by Lukasz Czajka
 */

tactic find-fact = \phi {
   let p =
      List.mapfind
         (\p {
            let x = goal p;
            if eq phi x then
               pequal phi p
            else {
               match x with
               | '(%b in BigType %n) ->
                  begin
                     match phi with
                     | '(%a in SuperType) when eq a b ->
                        bigtype-to-supertype (pequal '(a in BigType n) p)
                     | '(%a in BigType %m) when eq a b and m >= n ->
                        bigtype-upgrade m (pequal '(a in BigType n) p)
                     | %_ ->
                        ()
                  end
               | %_ -> ()
            }
         })
         facts
         ()
   in
   if p == () then {
      match phi with
      | '(%x in Data) ->
         let n = eval-limited x eval-limit;
         if is-number n then
            pequal phi (number-type-intro n)
         else
            ()
      | '(%x in Any) ->
         any-intro x
      | '(BigType %n c= BigType %m) when m > n ->
         bigtype-subset-bigtype-intro n m
      | '(BigType %n in BigType %m) when m > n ->
         bigtype-type-intro n m
      | '(BigType %n c= SuperType) ->
         bigtype-subset-supertype-intro n
      | '(BigType %n in SuperType) ->
         bigtype-in-supertype n
      | %_ ->
         ()
   } else
      p
}

tactic is-fact = \phi {
   is-proof (find-fact phi)
}

tactic fact = \phi {
   let p = find-fact phi;
   if is-proof p then
      p
   else
      error ("tactic fact failed on: " ^ to_string phi)
}
