
// laziness & higher-order functions

let filter = \lst \p { match lst with (%x, %t) -> if p x then (cons& x (filter t p)) else filter t p }
let take = \lst \n { if n == 0 then [] else match lst with (%h, %t) -> (cons h (take t (n - 1))) }
let nth = \lst \n { match lst with (%x, %t) -> if n == 1 then x else nth t (n - 1) }
let numbers = \n . cons& n (numbers (n + 1))

let divisible = \n \x . x mod n != 0
let eratostenes = \lst { let n = hd lst in (cons& n (eratostenes (filter (tl lst) (divisible n)))) }
let primes = eratostenes (numbers 2); // memory: linear, time: quadratic

let greater = \n \x . x > n

let f = \n \lst {
   let aux = \m \lst {
      if m == n then lst else aux (m + 1) (filter lst (greater m));
   };
   aux 0 lst
};

print (hd (f 3000 (numbers 0))); // memory: linear, time: quadratic
print (hd (filter (numbers 0) (\x . x > 10000000))); // memory & time: linear

print (take primes 10);
print (nth primes 100);
print (nth primes 1000);
print (nth primes 1000);
print (nth primes 5793);
print (nth primes 5793);
print (nth primes 10000);
print (nth primes 10000);
