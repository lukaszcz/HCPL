
// propositional logic

open Logic;

lemma
   '(ALL Prop \p . p => p)
proof
   fix p : Prop with prop-type-intro;
   assume p with (fact '(p in Prop));
   fact p
qed;

print "OK1";

lemma
   '(ALL Prop \p . ALL Prop \q . ALL Prop \r . (p => q) => ((q => r) => (p => r)))
proof
   fix p : Prop with prop-type-intro;
   fix q : Prop with prop-type-intro;
   fix r : Prop with prop-type-intro;
   assume '(p => q) with (impl-type-intro (fact '(p in Prop)) (fact '(q in Prop)));
   assume '(q => r) with (impl-type-intro (fact '(q in Prop)) (fact '(r in Prop)));
   assume p with (fact '(p in Prop));
   impl-elim (fact '(p => q)) (fact p) >>
   impl-elim (fact '(q => r))
qed;

print "OK2";

lemma
   '(ALL Prop \p . ALL Prop \q . p => (q => p))
proof
   fix p : Prop with prop-type-intro;
   fix q : Prop with prop-type-intro;
   assume p with (fact '(p in Prop));
   assume q with (fact '(q in Prop));
   fact p
qed;

print "OK3";

lemma
   '(ALL Prop \p . ALL Prop \q . ALL Prop \r . (p => (q => r)) => (p => q) => p => r)
proof
   fix p : Prop with prop-type-intro;
   fix q : Prop with prop-type-intro;
   fix r : Prop with prop-type-intro;
   assume '(p => (q => r)) with
      (impl-type-intro
         (fact '(p in Prop))
         (impl-type-intro
            (fact '(q in Prop))
            (fact '(r in Prop))));
   assume '(p => q) with (impl-type-intro (fact '(p in Prop)) (fact '(q in Prop)));
   assume p with (fact '(p in Prop));
   $1: verify '(q => r) << impl-elim (fact '(p => (q => r))) (fact p);
   $2: verify q << impl-elim (fact '(p => q)) (fact p);
   impl-elim $1 $2
qed;

print "OK4";

lemma
   '(ALL Prop \p . ALL Prop \q . ALL Prop \r . (p => r) => (q => r) => p or q => r)
proof
   fix p : Prop with prop-type-intro;
   fix q : Prop with prop-type-intro;
   fix r : Prop with prop-type-intro;
   assume '(p => r) with (impl-type-intro (fact '(p in Prop)) (fact '(r in Prop)));
   assume '(q => r) with (impl-type-intro (fact '(q in Prop)) (fact '(r in Prop)));
   assume '(p or q) with (or-type-intro (fact '(p in Prop)) (fact '(q in Prop)));
   or-elim (fact '(p or q)) {
      suppose p;
      impl-elim (fact '(p => r)) (fact p)
   }{
      suppose q;
      impl-elim (fact '(q => r)) (fact q)
   }
qed;

print "OK5";

lemma
   '(ALL Prop \p . ALL Prop \q . ALL Prop \r . (r => p) => (r => q) => r => p and q)
proof
   fix p : Prop with prop-type-intro;
   fix q : Prop with prop-type-intro;
   fix r : Prop with prop-type-intro;
   assume '(r => p) with (impl-type-intro (fact '(r in Prop)) (fact '(p in Prop)));
   assume '(r => q) with (impl-type-intro (fact '(r in Prop)) (fact '(q in Prop)));
   assume r with (fact '(r in Prop));
   and-intro (impl-elim (fact '(r => p)) (fact r)) (impl-elim (fact '(r => q)) (fact r))
qed;

print "OK6";

lemma
   '(ALL Prop \p . ALL Prop \q . ALL Prop \r . p and (q and r) <=> (p and q) and r)
proof
   fix p : Prop with prop-type-intro;
   fix q : Prop with prop-type-intro;
   fix r : Prop with prop-type-intro;
   equiv-intro {
      assume '(p and (q and r)) with
         (and-type-intro
            (fact '(p in Prop))
            (and-type-intro (fact '(q in Prop)) (fact '(r in Prop))));
      $p: and-elim-left (fact '(p and (q and r)));
      $q: and-elim-left (and-elim-right (fact '(p and (q and r))));
      $r: and-elim-right (and-elim-right (fact '(p and (q and r))));
      and-intro (and-intro $p $q) $r
   }{
      assume '((p and q) and r) with
         (and-type-intro
            (and-type-intro (fact '(p in Prop)) (fact '(q in Prop)))
            (fact '(r in Prop)));
      $r: and-elim-right (fact '((p and q) and r));
      $p: and-elim-left (and-elim-left (fact '((p and q) and r)));
      $q: and-elim-right (and-elim-left (fact '((p and q) and r)));
      and-intro $p (and-intro $q $r)
   }
qed;

print "OK7";
