
// more propositional logic (raw proof style)

open Logic;

lemma
   '(ALL Prop \p . p or false <=> p)
proof
   forall-intro prop-type-intro \p {
      suppose '(p in Prop);
      equiv-intro {
         impl-intro (or-type-intro (fact '(p in Prop)) false-type-intro) {
            suppose '(p or false);
            or-elim (fact '(p or false)) {
               suppose p;
               fact p
            }{
               suppose false;
               false-elim p (fact false)
            }
         }
      }{
         impl-intro (fact '(p in Prop)) {
            suppose p;
            or-intro-left (fact p) false
         }
      }
   }
qed;

print "OK1";

lemma
   '(ALL Prop \p . p or not p)
proof
   forall-intro prop-type-intro \p {
      suppose '(p in Prop);
      contradiction {
         assume '(not (p or not p)) with
            (not-type-intro
               (or-type-intro
                  (fact '(p in Prop))
                  (not-type-intro (fact '(p in Prop)))));
         not-intro-2 (fact '(p in Prop)) {
            suppose p;
            or-intro (fact p) '(not p) >>
            not-elim (fact '(not (p or not p)))
         } >>
         or-intro p >>
         not-elim (fact '(not (p or not p)))
      }
   }
qed;

print "OK2";
