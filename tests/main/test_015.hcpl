
// reduce test

let g = \x (`a, x)

let f = \x {
   match x with
   | g 35 -> 1
   | g (g 35) -> 2
   | g (g (g 35)) -> 3
   | %_ -> 4
};

print (g 35); // (`a, 35)
print (g (g 35)); // (`a, (`a, 35)
print (f (g 35)); // 1
print (f (g (g 35))); // 2
print (f (g (g (g 35)))); // 3
print (f (g (g (g (g 35))))); // 4
print (reduce '(g 35)); // '(`a, 35)
print (f (g (g 35))); // 2
print (reduce '(g (g 35))); // '(g (`a, 35))
print (reduce (reduce '(g (g 35)))); // '(`a, (`a, 35))
print (f (g 35)); // 1
print (f (g (g 35))); // 2
print (f (g (g (g 35)))); // 3
print (f (g (g (g (g 35))))); // 4
