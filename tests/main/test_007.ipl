
let lst = [1, 2, 3, 4]

let head = \x match x with (%h, %_) -> h | %_ -> ()
let tail = \x match x with (%_, %t) -> t | %_ -> []

;;;

print << head lst;
print << tail lst;

let f = \x \y {
   match x with
   | y -> 0
   | tail lst -> 1
   | cons %h %t -> h + f t (tail (tail y))
};

print << f [2, 3, 4] (tail lst); // 0
print << f [2, 3, 4] []; // 1
print << f [2, 3, 4, 5, 6, 7] [0, 0, 0, 0, 0, 0, 5, 6, 7]; // 9
print << f [2, 3, 4, 5, 6, 7, 2, 3, 4] [0, 0, 0, 0, 0, 0, 5, 6, 7]; // 28
print << f [1, 2, 3, 4, 2, 3, 4] [];

let g = \x \y {
   match x with
   | y -> 0
   | (match lst with (%_, %t) -> t | %_ -> ()) -> 1
   | cons %h %t -> h + f t (tail (tail y))
};

print << g [2, 3, 4] (tail lst);
print << g [2, 3, 4] [];
print << g [2, 3, 4, 5, 6, 7] [0, 0, 0, 0, 0, 0, 5, 6, 7];
print << g [2, 3, 4, 5, 6, 7, 2, 3, 4] [0, 0, 0, 0, 0, 0, 5, 6, 7];
print << g [1, 2, 3, 4, 2, 3, 4] [];
